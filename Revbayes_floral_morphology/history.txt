CHARACTER = "syndromes"
NUM_STATES = 3
# Import the morphological character matrix
morpho <- readDiscreteCharacterData("data/"+CHARACTER+".nex")
# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()phylogeny <- readTrees("data/Hillieae_DTE_fixed_topology.tree")[1]
# We assume every rate i <-> j to be exponentially distributed
rate_pr := phylogeny.treeLength() / 10
mu ~ dnExp(rate_pr)
moves.append( mvScale( mu, weight=2 ) )
# Specify the rate matrix
NUM_RATES = NUM_STATES * (NUM_STATES-1)
for ( i in 1:NUM_RATES ) {
    rate[i] := mu
}
Q_morpho := fnFreeK( rate, rescale=false )
q()
CHARACTER = "syndromes"
NUM_STATES = 3
# Import the morphological character matrix
morpho <- readDiscreteCharacterData("data/"+CHARACTER+".nex")
# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()
phylogeny <- readTrees("data/Hillieae_DTE_fixed_topology.tree")[1]
# We assume every rate i <-> j to be exponentially distributed
rate_pr := phylogeny.treeLength() / 10
mu ~ dnExp(rate_pr)
moves.append( mvScale( mu, weight=2 ) )
# Specify the rate matrix
NUM_RATES = NUM_STATES * (NUM_STATES-1)
for ( i in 1:NUM_RATES ) {
    rate[i] := mu
}
Q_morpho := fnFreeK( rate, rescale=false )
rf_prior <- rep(1,NUM_STATES)
rf <- simplex( rf_prior )
phyMorpho ~ dnPhyloCTMC(tree=phylogeny, Q=Q_morpho, rootFrequencies=rf, type="Standard")
phyMorpho.clamp(morpho)
# Initialize the model object 
mymodel = model(phylogeny)
# Create a vector of monitors 
## 1. for the full model #
monitors.append( mnModel(filename="output/"+CHARACTER+"_ERM.log", printgen=1) )
## 2. and a few select parameters to be printed to the screen #
monitors.append( mnScreen(printgen=100) )
## 3. add an ancestral state monitor
monitors.append( mnJointConditionalAncestralState(tree=phylogeny,
                                                  ctmc=phyMorpho,
                                                  filename="output/"+CHARACTER+"_ERM.states.txt",
                                                  type="Standard",
                                                  printgen=1,
                                                  withTips=true,
                                                  withStartStates=false) )
## 4. add stochastic character map monitor 
monitors.append( mnStochasticCharacterMap(ctmc=phyMorpho, filename="output/"+CHARACTER+"_ERM.maps.log", printgen=1, include_simmap=true) )
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")
mymcmc.run(generations=10000, tuningInterval=200)
anc_states = readAncestralStateTrace("output/"+CHARACTER+"_ERM.states.txt")
anc_tree = ancestralStateTree(tree=phylogeny, ancestral_state_trace_vector=anc_states, include_start_states=false, file="output/"+CHARACTER+"_ase_ERM.tree", burnin=0.25, summary_statistic="MAP", site=1)
anc_state_trace = readAncestralStateTrace("output/"+CHARACTER+"_ERM.maps.log")
characterMapTree(phylogeny, anc_state_trace, character_file="output/character.tree", posterior_file="output/posterior.tree", burnin=5, reconstruction="marginal")
q()
